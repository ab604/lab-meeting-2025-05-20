---
title: "Lab Meeting"
author: "Alistair Bailey"
date: last-modified
date-format: "[Last updated on] YYYY-MM-DD"
format:
  revealjs:
    theme: [assets/styles.scss]
title-slide-attributes:
    data-background-image: img/USH0149_LOGO-2021_RGB_White_Punched-AW.png
    data-background-size: 25%
    data-background-position: top right
    data-background-color: "#8D3970"
---

```{r}
#| label: set-up
#| echo: false
#| warning: false
#| message: false
library(tidyverse)
```

## {background-image="img/figure-03-small-points-2025-05-06.png" background-position="center" background-size="50%"}

## Tidy Data {.center}

1. Every variable has it's own column
2. Every observation has it's own row
3. Every value has it's own cell

## Messy Data {background-image="img/Screenshot from 2025-05-19 10-00-34.png" background-position="center" background-size="100%"}

## Tidied Data {background-image="img/Screenshot from 2025-05-19 09-56-45.png" background-position="center" background-size="100%"}

## [Data Organization in Spreadsheets]{.vonrestoff}{.center}
by Karl Broman and Kara Woo (2018)

[10.1080/00031305.2017.1375989](https://doi.org/10.1080/00031305.2017.1375989)

## Hierarchy of Graphical Perception {.center}

[Graphical Perception: Theory, Experimentation, and Application to the Development of Graphical Methods by Cleveland and  McGill (1984)](https://www.jstor.org/stable/pdf/2288400.pdf?refreqid=excelsior%3Ab321aba183cce22a7f93335ca107eec6)

## {.center}
In all plots: A:32%, B:29%, C:34%, D:25% and E:22%

```{r}
#| label: viz-dat
#| echo: false
viz_dat <- tibble(
  Country = LETTERS[seq(from = 5, to = 1)],
  Percent = c(0.22, 0.25, 0.34, 0.29, 0.32)
)

theme_clean <- function() {
  theme_minimal(base_family = "Inter") +
    theme(
      legend.position = "",
      axis.ticks = element_blank(),
      axis.title.x = element_blank(),
      axis.title.y = element_blank(),
      panel.grid.major = element_blank(),
      panel.grid.minor = element_blank(),
      panel.border = element_blank(),
      panel.grid = element_blank(),
      plot.title = element_text(size = 14, face = "bold")
    )
}

p1 <- viz_dat |>
  ggplot(aes(x = fct_reorder(Country, Percent), y = Percent)) +
  geom_bar(stat = "identity") +
  scale_y_continuous(labels = scales::label_percent()) +
  coord_flip() +
  theme_clean()

p2 <- viz_dat |>
  ggplot(aes(Country, Percent)) +
  #   geom_segment(aes(x = Country, xend = Country, y = 0, yend = Percent)) +
  geom_bar(stat = "identity") +
  scale_y_continuous(labels = scales::label_percent()) +
  coord_flip() +
  theme_clean()

p3 <- viz_dat |>
  ggplot(aes(Country, Percent)) +
  geom_point() +
  scale_y_continuous(labels = scales::label_percent(), limits = c(0,0.35)) +
  coord_flip() +
  theme_clean()

p4 <- viz_dat |>
  ggplot(aes(Country, 1, size = Percent, label = Country)) +
  geom_point(colour = 'grey') +
  geom_text(hjust = 0.4, nudge_x = 0.35, size = 5) +
  theme_clean() +
  theme(
    legend.position = "",
    axis.ticks = element_blank(),
    axis.text.x = element_blank(),
    axis.text.y = element_blank(),
    axis.title.x = element_blank(),
    axis.title.y = element_blank(),
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    panel.border = element_blank(),
    panel.grid = element_blank()
  )

p5 <- viz_dat |>
  ggplot(aes(area = Percent, label = Country)) +
  treemapify::geom_treemap() +
  treemapify::geom_treemap_text(colour = "white")

p6 <- viz_dat |>
  ggplot(aes(x = "", y = Percent, fill = Country)) +
  geom_bar(stat = "identity") +
  coord_polar(theta = "y") +
  scale_fill_brewer(palette = "Dark2") +
  geom_text(
    aes(label = Country),
    y = c(4.1, 3.8, -2.15, 1.8, 2.95),
    colour = "white",
    size = 4
  ) +
  theme_clean() +
  theme(
    legend.position = "",
    axis.ticks = element_blank(),
    axis.text.x = element_blank(),
    axis.text.y = element_blank(),
    axis.title.x = element_blank(),
    axis.title.y = element_blank(),
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    panel.border = element_blank(),
    panel.grid = element_blank()
  )

p7 <- viz_dat |>
  ggplot(aes(x = Country, y = 1, fill = Percent)) +
  geom_tile() +
  geom_text(aes(label = Country), y = 1, colour = "white", size = 10) +
  theme_clean() +
  theme(
    legend.position = "",
    axis.ticks = element_blank(),
    axis.text.x = element_blank(),
    axis.text.y = element_blank(),
    axis.title.x = element_blank(),
    axis.title.y = element_blank(),
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    panel.border = element_blank(),
    panel.grid = element_blank()
  )

cowplot::plot_grid(p1, p2, p3, p4, p5, p6, p7)
```

## Consider datasets A, B, C and D {.center}
They have summary statistics:
```{r}
#| label: datasaurus
#| echo: false
# Download the Datasaurus Dozen
datasaurus <- read_tsv("https://raw.githubusercontent.com/ab604/coding-together/master/exercises/DatasaurusDozen.tsv")

quartet <- datasaurus |> filter(dataset %in% c("dino", "star","bullseye", "dots")) |>
    mutate(df = case_when(dataset == "dino" ~ "A",
    dataset == "star" ~ "B", dataset == "bullseye" ~ "C", dataset == "dots" ~ "D"))
```

```{r}
#| label: quartet
quartet |>
  select(-dataset) |>
  group_by(df) |>
  summarise(mean_x = mean(x), mean_y = mean(y), sd_x = sd(x), sd_y = sd(y)) |>
  tinytable::tt(digits = 4)
```

## {.center background-color="white"}

```{r}
ggplot(data = quartet) +
  geom_point(mapping = aes(x, y)) +
  facet_wrap(~df) +
  coord_fixed(ratio = 0.7) +
  theme_clean()
```

## {background-image="img/Screenshot from 2025-05-19 15-13-55.png" background-position="center" background-size="50%"}

## Building the Exchange/Forward Exchange Figure

1. Decide on plot types:
    + Parity Plot: data of equal value will fall on the line of parity
    + Box Plot: plot the difference between values
2. Consider how many plots are needed:
    + We have three timepoints to plot and two pD conditions: 2 x 6 = 12 plots
4. Create the plots
3. Apply theming e.g. fonts, colours, annotations
5. Arrange the plots on a single figure

## Create the plots
